name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  BUCKET_NAME: my-frontend-bucket3
  EC2_HOST_1: 3.135.189.112
  EC2_HOST_2: 18.220.111.26
  REPO_URL: https://github.com/giovanni-pe/trabajofinal.git
  
jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          echo "Running as user $(whoami)"
          echo "INSTALLING NPM ......"
          npm install

  deploy-private:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
      - name: Delete previous distribution on EC2
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@"${{ env.EC2_HOST_1 }}" << 'EOF'
            #!/bin/bash

            # Stop all running Docker containers
            echo "Stopping all Docker containers..."
            sudo docker stop $(sudo docker ps -q) || echo "No running containers to stop."

            # Remove all Docker containers
            echo "Removing all Docker containers..."
            sudo docker rm $(sudo docker ps -aq) || echo "No containers to remove."

            # Remove all Docker images
            echo "Removing all Docker images..."
            sudo docker rmi $(sudo docker images -q) || echo "No Docker images to remove."

            # Clean up old application directory
            echo "Removing the old application directory..."
            sudo rm -rf /home/ec2-user/nodeapp

            # List contents of the application directory for verification
            echo "Listing /home/ec2-user/:"
            ls /home/ec2-user/
          EOF

      - name: Build and Run Docker Container on EC2
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@"${{ env.EC2_HOST_1 }}" << 'EOF'
            #!/bin/bash

            # Clone your Node.js app from the Git repository (replace with your repo)
            cd /home/ec2-user
            git clone ${{ env.REPO_URL }} nodeapp
            cd nodeapp

            # Run the services with Docker Compose
             sudo curl -L "https://github.com/docker/compose/releases/download/$(sudo curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d '"' -f 4)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
            sudo docker-compose up -d
            sudo docker-compose up --build -d
          EOF

      - name: Clean up SSH key
        run: rm ec2_key.pem

  deploy-public:
    runs-on: ubuntu-latest
    needs: deploy-private
    steps:
      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
      - name: Delete previous distribution on EC2  
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@"${{ env.EC2_HOST_2 }}" << 'EOF'
            #!/bin/bash

            # Stop all running Docker containers
            echo "Stopping all Docker containers..."
            sudo docker stop $(sudo docker ps -q) || echo "No running containers to stop."

            # Remove all Docker containers
            echo "Removing all Docker containers..."
            sudo docker rm $(sudo docker ps -aq) || echo "No containers to remove."

            # Remove all Docker images
            echo "Removing all Docker images..."
            sudo docker rmi $(sudo docker images -q) || echo "No Docker images to remove."

            # Clean up old application directory
            echo "Removing the old application directory..."
            sudo rm -rf /home/ec2-user/nodeapp

            # List contents of the application directory for verification
            echo "Listing /home/ec2-user/:"
            ls /home/ec2-user/
          EOF

      - name: Build and Run Docker Container on EC2
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@"${{ env.EC2_HOST_2 }}" << 'EOF'
            #!/bin/bash

            # Clone your Node.js app from the Git repository (replace with your repo)
            cd /home/ec2-user
            git clone https://github.com/giovanni-pe/microservices.git nodeapp
            cd nodeapp/obs

            # Build the Docker image
            sudo docker-compose up 

           
          EOF

      - name: Clean up SSH key
        run: rm ec2_key.pem

  frontend:
    name: Deploy Frontend (S3 Static Website)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync Frontend to S3
        run: |
          aws s3 sync host/dist/host s3://${{ env.BUCKET_NAME }} \
            --acl public-read